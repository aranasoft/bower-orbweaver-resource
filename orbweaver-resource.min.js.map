{"version":3,"sources":["orbweaver-resource.min.js"],"names":["window","angular","undefined","orbweaver","module","factory","$resource","url","params","methods","options","idProperty","defaults","update","method","isArray","create","extend","resource","prototype","$save","success","failure","this","$update","$create","$q","defer","fn","deferred","response","resolve","reject","promise","deferInstance","inst","RestfulResource","empty","all","query","find","id","get","save","res","delete"],"mappings":"CAAA,SAAWA,EAAQC,EAASC,GAC1B,YAEA,IAAIC,GAAYF,EAAQG,OAAO,eAAgB,cAE/CD,GAAUE,QAAQ,sBAAuB,YAAa,SAAUC,GAC9D,MAAO,UAAUC,EAAKC,EAAQC,EAASC,GACrC,GAAIC,GAAa,IACbD,IAAWA,EAAQC,aAAeA,EAAaD,EAAQC,WAE3D,IAAIC,IACFC,QAASC,OAAQ,MAAOC,SAAS,GACjCC,QAASF,OAAQ,QAGnBL,GAAUR,EAAQgB,OAAOL,EAAUH,EAEnC,IAAIS,GAAWZ,EAAUC,EAAKC,EAAQC,EAWtC,OAVAS,GAASP,WAAaA,EAEtBO,EAASC,UAAUC,MAAQ,SAAUZ,EAAQa,EAASC,GAC/CC,KAAKZ,GAGRY,KAAKC,QAAQhB,EAAQa,EAASC,GAF9BC,KAAKE,QAAQjB,EAAQa,EAASC,IAM3BJ,MAIXf,EAAUE,QAAQ,qBAAsB,KAAM,SAAUqB,GACtD,GAAIC,GAAQ,SAAUC,EAAIpB,GACxBA,EAASA,KACT,IAAIqB,GAAWH,EAAGC,OAQlB,OAPAC,GAAGpB,EACC,SAAUsB,GACRD,EAASE,QAAQD,IAEnB,SAAUA,GACRD,EAASG,OAAOF,KAEfD,EAASI,SAGdC,EAAgB,SAAUC,EAAMP,EAAIpB,GACtCA,EAASA,KACT,IAAIqB,GAAWH,EAAGC,OAQlB,OAPAQ,GAAKP,GAAIpB,EACL,SAAUsB,GACRD,EAASE,QAAQD,IAEnB,SAAUA,GACRD,EAASG,OAAOF,KAEfD,EAASI,QAGlB,OAAO,UAAUG,GACf,GAAIzB,GAAayB,EAAgBzB,UAEjC,QACE0B,MAAO,WACL,MAAO,IAAID,IAEbE,IAAK,SAAU9B,GACb,MAAOmB,GAAMS,EAAgBG,MAAO/B,IAEtCgC,KAAM,SAAUC,EAAIjC,GAClBA,EAASA,KACT,IAAIE,KAGJ,OAFAA,GAAQC,GAAc8B,EACtBjC,EAASP,EAAQgB,OAAOT,EAAQE,GACzBiB,EAAMS,EAAgBM,IAAKlC,IAEpCmC,KAAM,SAAUC,EAAKpC,GAEnB,GADAA,EAASA,MACLoC,EAAIH,GAAI,CACV,GAAI/B,KAGJ,OAFAA,GAAQC,GAAciC,EAAIjC,GAC1BH,EAASP,EAAQgB,OAAOT,EAAQE,GACzBwB,EAAcU,EAAK,UAAWpC,GAErC,MAAO0B,GAAcU,EAAK,UAAWpC,IAGzCqC,SAAU,SAAUD,EAAKpC,GACvBA,EAASA,KACT,IAAIE,KAGJ,OAFAA,GAAQC,GAAciC,EAAIjC,GAC1BH,EAASP,EAAQgB,OAAOT,EAAQE,GACzBiB,EAAMS,EAAgB,UAAW5B,UAK/CR,OAAQA,OAAOC","file":"orbweaver-resource.min.js","sourcesContent":["(function (window, angular, undefined) {\n  'use strict';\n\n  var orbweaver = angular.module('orbResource', ['ngResource']);\n\n  orbweaver.factory(\"orbRestfulResource\", ['$resource', function ($resource) {\n    return function (url, params, methods, options) {\n      var idProperty = 'id';\n      if( options && options.idProperty ) { idProperty = options.idProperty; }\n\n      var defaults = {\n        update: {method: 'put', isArray: false},\n        create: {method: 'post'}\n      };\n\n      methods = angular.extend(defaults, methods);\n\n      var resource = $resource(url, params, methods);\n      resource.idProperty = idProperty;\n\n      resource.prototype.$save = function (params, success, failure) {\n        if (!this[idProperty]) {\n          this.$create(params, success, failure);\n        } else {\n          this.$update(params, success, failure);\n        }\n      };\n\n      return resource;\n    };\n  }]);\n\n  orbweaver.factory(\"orbRestfulService\", ['$q', function ($q) {\n    var defer = function (fn, params) {\n      params = params || {};\n      var deferred = $q.defer();\n      fn(params,\n          function (response) {\n            deferred.resolve(response);\n          },\n          function (response) {\n            deferred.reject(response);\n          });\n      return deferred.promise;\n    };\n\n    var deferInstance = function (inst, fn, params) {\n      params = params || {};\n      var deferred = $q.defer();\n      inst[fn](params,\n          function (response) {\n            deferred.resolve(response);\n          },\n          function (response) {\n            deferred.reject(response);\n          });\n      return deferred.promise;\n    };\n\n    return function (RestfulResource) {\n      var idProperty = RestfulResource.idProperty;\n\n      return {\n        empty: function () {\n          return new RestfulResource();\n        },\n        all: function (params) {\n          return defer(RestfulResource.query, params);\n        },\n        find: function (id, params) {\n          params = params || {};\n          var options = {};\n          options[idProperty] = id;\n          params = angular.extend(params, options);\n          return defer(RestfulResource.get, params);\n        },\n        save: function (res, params) {\n          params = params || {};\n          if (res.id) {\n            var options = {};\n            options[idProperty] = res[idProperty];\n            params = angular.extend(params, options);\n            return deferInstance(res, \"$update\", params);\n          } else {\n            return deferInstance(res, \"$create\", params);\n          }\n        },\n        'delete': function (res, params) {\n          params = params || {};\n          var options = {};\n          options[idProperty] = res[idProperty];\n          params = angular.extend(params, options);\n          return defer(RestfulResource['delete'], params);\n        }\n      };\n    };\n  }]);\n})(window, window.angular);\n"],"sourceRoot":"/source/"}